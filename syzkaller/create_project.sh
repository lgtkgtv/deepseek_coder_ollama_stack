#!/bin/bash

# Create the directory structure
mkdir -p fuzzing-tutorial-demo-project/scripts
mkdir -p fuzzing-tutorial-demo-project/kernel_module
mkdir -p fuzzing-tutorial-demo-project/syzkaller_config
mkdir -p fuzzing-tutorial-demo-project/manual_test

# Write README.md
cat <<'EOF' > fuzzing-tutorial-demo-project/README.md
# Fuzzing Tutorial Demo Project

This project demonstrates how to use Syzkaller to fuzz a simple, vulnerable kernel module.

## Purpose

The purpose of this tutorial is to provide a hands-on example of kernel fuzzing with Syzkaller. It covers the essential steps, from creating a vulnerable kernel module to setting up and running Syzkaller.

## Contents

* \`scripts/\`: Contains automation scripts for building and installing Syzkaller, building the kernel module, and running the fuzzer.
* \`kernel_module/\`: Contains the source code for the vulnerable kernel module and its Makefile.
* \`syzkaller_config/\`: Contains the Syzkaller configuration files.
* \`manual_test/\`: Contains instructions for manually testing the kernel module.

## Prerequisites

* Ubuntu 24.04 (or a compatible Linux distribution)
* Go (latest version)
* GCC
* Kernel headers
* QEMU
* Git

## Setup Instructions

1.  **Clone the Repository:**
    \`\`\`bash
    git clone [https://github.com/your-github-username/fuzzing-tutorial-demo-project.git](https://www.google.com/search?q=https://github.com/your-github-username/fuzzing-tutorial-demo-project.git)
    cd fuzzing-tutorial-demo-project
    \`\`\`
2.  **Install Syzkaller:**
    \`\`\`bash
    ./scripts/install_syzkaller.sh
    \`\`\`
3.  **Build and Install Kernel Module:**
    \`\`\`bash
    ./scripts/build_module.sh
    \`\`\`
4.  **Configure Syzkaller:**
    * Edit \`syzkaller_config/vulnerable.cfg\` and replace the placeholder paths with the actual paths on your system.
5.  **Manual Test:**
    * Follow the instructions in \`manual_test/manual_test_instructions.md\` to verify that the kernel module is working correctly.

## Running the Fuzzer

1.  **Run the Fuzzer:**
    \`\`\`bash
    ./scripts/run_fuzzer.sh
    \`\`\`

## Collecting and Analyzing Fuzzing Outcome

* Syzkaller will output crash reports and other information to the \`workdir\` directory (specified in \`vulnerable.cfg\`).
* Use the Syzkaller web interface (specified in \`vulnerable.cfg\`) to monitor the fuzzing process.
* Analyze crash reports to identify and understand the vulnerabilities.
* Use the reproducer programs generated by Syzkaller to reproduce the crashes.

## Important Notes

* Ensure your kernel is configured with KCOV enabled.
* Running with \`sandbox: "none"\` is highly insecure. Only use this in a controlled VM environment.
* Adjust all paths in the configuration files to match your system.
* The QEMU image needs to have your compiled kernel, the vulnerable module installed, and an SSH server running.
EOF

# Write scripts/install_syzkaller.sh
cat <<'EOF' > fuzzing-tutorial-demo-project/scripts/install_syzkaller.sh
#!/bin/bash

# Install Go
sudo apt update
sudo apt install golang-go

# Clone Syzkaller
git clone https://github.com/google/syzkaller.git
cd syzkaller
make

echo "Syzkaller installed successfully."
EOF
chmod +x fuzzing-tutorial-demo-project/scripts/install_syzkaller.sh

# Write scripts/build_module.sh
cat <<'EOF' > fuzzing-tutorial-demo-project/scripts/build_module.sh
#!/bin/bash

cd kernel_module
make
sudo insmod vulnerable_module.ko
echo "Kernel module built and installed."
EOF
chmod +x fuzzing-tutorial-demo-project/scripts/build_module.sh

# Write scripts/run_fuzzer.sh
cat <<'EOF' > fuzzing-tutorial-demo-project/scripts/run_fuzzer.sh
#!/bin/bash

syzkaller/bin/syz-manager -config=syzkaller_config/vulnerable.cfg
EOF
chmod +x fuzzing-tutorial-demo-project/scripts/run_fuzzer.sh

# Write kernel_module/vulnerable.c
cat <<'EOF' > fuzzing-tutorial-demo-project/kernel_module/vulnerable.c
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/proc_fs.h>
#include <linux/uaccess.h>
#include <linux/string.h>

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("Vulnerable Kernel Module for Syzkaller");

static struct proc_dir_entry *proc_entry;
static char kernel_buffer[16]; // Small buffer for vulnerability

static ssize_t vulnerable_write(struct file *file, const char __user *ubuf, size_t count, loff_t *ppos) {
    if (count > sizeof(kernel_buffer)) {
        printk(KERN_ALERT "Buffer overflow attempted!\\n");
        // Intentionally not handling the overflow, creating the vulnerability.
    }
    if (copy_from_user(kernel_buffer, ubuf, count)) {
        return -EFAULT;
    }
    return count;
}

static const struct proc_ops proc_file_fops = {
    .proc_write = vulnerable_write,
};

static int __init vulnerable_module_init(void) {
    proc_entry = proc_create("vulnerable_module", 0666, NULL, &proc_file_fops);
    if (!proc_entry) {
        printk(KERN_ALERT "Failed to create proc entry\\n");
        return -ENOMEM;
    }
    printk(KERN_INFO "Vulnerable module loaded\\n");
    return 0;
}

static void __exit vulnerable_module_exit(void) {
    proc_remove(proc_entry);
    printk(KERN_INFO "Vulnerable module unloaded\\n");
}

module_init(vulnerable_module_init);
module_exit(vulnerable_module_exit);
EOF

# Write kernel_module/Makefile
cat <<'EOF' > fuzzing-tutorial-demo-project/kernel_module/Makefile
obj-m += vulnerable_module.o

all:
        make -C /lib/modules/\<span class="math-inline">\(shell uname \-r\)/build M\=\\$\(PWD\) modules
clean\:
make \-C /lib/modules/\\$\(shell uname \-r\)/build M\=\\</span>(PWD) clean
EOF

# Write syzkaller_config/vulnerable.cfg
cat <<'EOF' > fuzzing-tutorial-demo-project/syzkaller_config/vulnerable.cfg
{
    "target": "linux/amd64",
    "http": "127.0.0.1:56741",
    "workdir": "workdir",
    "kernel_obj": "/path/to/your/kernel/build",
    "image": "/path/to/your/image.img",
    "sshkey": "/path/to/your/sshkey",
    "syzkaller": "/path/to/syzkaller",
    "procs": 8,
    "type": "qemu",
    "vm": {
        "count": 4,
        "cpu": 2,
        "mem": 2048
    },
    "sandbox": "none",
    "enable_syscalls": "write\$vulnerable_module"
}
EOF

# Write syzkaller_config/vulnerable.txt
cat <<'EOF' > fuzzing-tutorial-demo-project/syzkaller_config/vulnerable.txt
write\$vulnerable_module(buf ptr[in], count len[buf])
EOF

# Write manual_test/manual_test_instructions.md
echo "# Manual Test Instructions" > fuzzing-
